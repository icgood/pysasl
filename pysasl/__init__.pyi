
from typing import Any, Optional, Sequence, Mapping, Union

_Advertised = Optional[Sequence[Union[bytes, '_BaseMechanism']]]

class AuthenticationError(Exception): ...

class UnexpectedAuthChallenge(AuthenticationError):
    def __init__(self) -> None: ...

class AuthenticationCredentials:
    def __init__(self, authcid: str, secret: str,
                 authzid: Optional[str] = ...) -> None: ...
    @property
    def authcid(self) -> str: ...
    @property
    def secret(self) -> str: ...
    @property
    def authzid(self) -> Optional[str]: ...
    def check_secret(self, secret: Union[bytes, str]) -> bool: ...

class ClientResponse:
    response: bytes = ...
    challenge: Optional[bytes] = ...
    def __init__(self, response: bytes) -> None: ...
    def get_response(self) -> bytes: ...
    def set_challenge(self, data: bytes) -> None: ...

class ServerChallenge(Exception):
    challenge: bytes = ...
    response: Optional[bytes] = ...
    def __init__(self, challenge: bytes) -> None: ...
    def get_challenge(self) -> bytes: ...
    def set_response(self, data: Optional[bytes]) -> None: ...

class _BaseMechanism:
    @property
    def name(self) -> bytes: ...
    @property
    def insecure(self) -> bool: ...
    @property
    def priority(self) -> int: ...
    def __lt__(self, other: Any) -> bool: ...

class ServerMechanism(_BaseMechanism):
    @property
    def name(self) -> bytes: ...
    def server_attempt(self, challenges: Sequence[ServerChallenge]) \
            -> AuthenticationCredentials: ...

class ClientMechanism(_BaseMechanism):
    @property
    def name(self) -> bytes: ...
    def client_attempt(self, creds: AuthenticationCredentials,
                       responses: Sequence[ClientResponse]) \
            -> ClientResponse: ...

class SASLAuth:
    mechs: Mapping[bytes, _BaseMechanism] = ...
    def __init__(self, advertised: _Advertised = ...) -> None: ...
    @classmethod
    def secure(cls) -> SASLAuth: ...
    @property
    def server_mechanisms(self) -> Sequence[ServerMechanism]: ...
    @property
    def client_mechanisms(self) -> Sequence[ClientMechanism]: ...
    def get(self, name: bytes) -> Optional[_BaseMechanism]: ...
    def get_server(self, name: bytes) -> Optional[ServerMechanism]: ...
    def get_client(self, name: bytes) -> Optional[ClientMechanism]: ...
