
from typing import Any, Text, ClassVar, Union, Optional, Tuple, \
    Sequence, Mapping
from typing_extensions import Final

_Advertised = Optional[Sequence[Union[bytes, 'BaseMechanism']]]


class AuthenticationError(Exception): ...

class UnexpectedAuthChallenge(AuthenticationError):
    def __init__(self) -> None: ...

class AuthenticationCredentials:
    has_secret: Final[bool]
    authcid: Final[Text]
    secret: Final[Text]
    authzid: Final[Optional[Text]]
    @property
    def identity(self) -> Text: ...
    def __init__(self, authcid: Text, secret: Text,
                 authzid: Optional[Text] = ...) -> None: ...
    def check_secret(self, secret: Text) -> bool: ...

class ClientResponse:
    response: Final[bytes]
    challenge: Optional[bytes]
    def __init__(self, response: bytes) -> None: ...
    def get_response(self) -> bytes: ...
    def set_challenge(self, data: bytes) -> None: ...

class ServerChallenge(Exception):
    challenge: Final[bytes]
    response: Optional[bytes]
    def __init__(self, challenge: bytes) -> None: ...
    def get_challenge(self) -> bytes: ...
    def set_response(self, data: Optional[bytes]) -> None: ...

class BaseMechanism:
    name: ClassVar[bytes]
    priority: ClassVar[Optional[int]]
    insecure: ClassVar[bool]
    def __lt__(self, other: Any) -> bool: ...

class ServerMechanism(BaseMechanism):
    def server_attempt(self, challenges: Sequence[ServerChallenge]) \
            -> Tuple[AuthenticationCredentials, Optional[bytes]]: ...

class ClientMechanism(BaseMechanism):
    def client_attempt(self, creds: AuthenticationCredentials,
                       responses: Sequence[ClientResponse]) \
            -> ClientResponse: ...

class SASLAuth:
    mechs: Final[Mapping[bytes, BaseMechanism]]
    def __init__(self, advertised: _Advertised = ...) -> None: ...
    @classmethod
    def secure(cls) -> SASLAuth: ...
    @classmethod
    def plaintext(cls) -> SASLAuth: ...
    @property
    def server_mechanisms(self) -> Sequence[ServerMechanism]: ...
    @property
    def client_mechanisms(self) -> Sequence[ClientMechanism]: ...
    def get(self, name: bytes) -> Optional[BaseMechanism]: ...
    def get_server(self, name: bytes) -> Optional[ServerMechanism]: ...
    def get_client(self, name: bytes) -> Optional[ClientMechanism]: ...
